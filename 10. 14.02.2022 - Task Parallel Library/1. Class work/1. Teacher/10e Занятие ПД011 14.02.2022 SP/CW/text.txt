1. TPL - Task Parallel Library
2. Асинхронные операции
3. TAP - Task Asynchronous Pattern: async/await

Пул потоков

Набор потоков, доступный для использования приложением.
Каждый процесс имеет собственный пул потоков, все AppDomain процесса имеют доступ к пулу потоков

Управл. структруры пула потоков - очередь запросов приложения (очередь вызовов потоков).
Если в очереди много запросов к одному и тому же потоку
   ► пул пытается работать с одним экземпляром потока
   ► если очередь запросов не сокращается - создаются и запускаются доп. экземпляры потока 
   ► по завершении поток не уничтожается, остается в пуле, но переводится в состояние 
     "сон" - приостановлен
   ► если поток простаивает больше какого-то времени, то пул его уничтожает

Т.е. пул потоков работает по адаптивному, эвристическому алгоритму, что обеспечивает 
масштабируемость и производительность приложения

Пул различает два типа потоков
☼ рабочие потоки - выполняют асинхронные вычислительные операции  
☼ потоки ввода/вывода - выполняют асинхронные операции ввода/вывода, т.е.
  операции с устройствами

Асинхронные операции - операции ввода/вывода или вычислительные, не занимающие
поток исполнения за счет алгоритма выполнения:
	1. запуск операции в дополнительном потоке исполнения
	2. операция выполняется в этом дополнительном потоке
	3. основной поток извещается о завершении операции
	   (методы извещения: ожидание, опрос состояния, метод/функция обратного вызова)

Т.е. пул потоков реализует технологию программирования APM - Asynchronous Programming Model

Пул потоков реализуется классом System.Threading.ThreadPool

Есть ограничения на количество потоков. В т.ч. алгоритмичеческие - быстро создается
какое-то кол-во потоков, далее - создание 1 потока в 500 мс

Потоки пула соответсвуют делегату delegate void WaitCallback(object state);

‼ В потоках, особенно вычислитеольных не использовать синхронные операции ‼